/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AntiqueCertificationIssuanceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "certifications"
      | "getCertificationCount"
      | "getCertificationDetails"
      | "issueCertification"
      | "owner"
      | "revokeCertification"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CertificationIssued" | "CertificationRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "certifications",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCertificationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCertificationDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issueCertification",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revokeCertification",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "certifications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCertificationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCertificationDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueCertification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeCertification",
    data: BytesLike
  ): Result;
}

export namespace CertificationIssuedEvent {
  export type InputTuple = [
    owner: AddressLike,
    artifactName: string,
    certificationDate: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    artifactName: string,
    certificationDate: bigint
  ];
  export interface OutputObject {
    owner: string;
    artifactName: string;
    certificationDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertificationRevokedEvent {
  export type InputTuple = [
    index: BigNumberish,
    artifactName: string,
    revocationDate: BigNumberish
  ];
  export type OutputTuple = [
    index: bigint,
    artifactName: string,
    revocationDate: bigint
  ];
  export interface OutputObject {
    index: bigint;
    artifactName: string;
    revocationDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AntiqueCertificationIssuance extends BaseContract {
  connect(runner?: ContractRunner | null): AntiqueCertificationIssuance;
  waitForDeployment(): Promise<this>;

  interface: AntiqueCertificationIssuanceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  certifications: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean] & {
        ownerAddress: string;
        artifactName: string;
        certificationDate: bigint;
        isCertified: boolean;
      }
    ],
    "view"
  >;

  getCertificationCount: TypedContractMethod<[], [bigint], "view">;

  getCertificationDetails: TypedContractMethod<
    [_index: BigNumberish],
    [
      [string, string, bigint, boolean] & {
        ownerAddress: string;
        artifactName: string;
        certificationDate: bigint;
        isCertified: boolean;
      }
    ],
    "view"
  >;

  issueCertification: TypedContractMethod<
    [_artifactName: string],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  revokeCertification: TypedContractMethod<
    [_index: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "certifications"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean] & {
        ownerAddress: string;
        artifactName: string;
        certificationDate: bigint;
        isCertified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCertificationCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCertificationDetails"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [
      [string, string, bigint, boolean] & {
        ownerAddress: string;
        artifactName: string;
        certificationDate: bigint;
        isCertified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "issueCertification"
  ): TypedContractMethod<[_artifactName: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "revokeCertification"
  ): TypedContractMethod<[_index: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "CertificationIssued"
  ): TypedContractEvent<
    CertificationIssuedEvent.InputTuple,
    CertificationIssuedEvent.OutputTuple,
    CertificationIssuedEvent.OutputObject
  >;
  getEvent(
    key: "CertificationRevoked"
  ): TypedContractEvent<
    CertificationRevokedEvent.InputTuple,
    CertificationRevokedEvent.OutputTuple,
    CertificationRevokedEvent.OutputObject
  >;

  filters: {
    "CertificationIssued(address,string,uint256)": TypedContractEvent<
      CertificationIssuedEvent.InputTuple,
      CertificationIssuedEvent.OutputTuple,
      CertificationIssuedEvent.OutputObject
    >;
    CertificationIssued: TypedContractEvent<
      CertificationIssuedEvent.InputTuple,
      CertificationIssuedEvent.OutputTuple,
      CertificationIssuedEvent.OutputObject
    >;

    "CertificationRevoked(uint256,string,uint256)": TypedContractEvent<
      CertificationRevokedEvent.InputTuple,
      CertificationRevokedEvent.OutputTuple,
      CertificationRevokedEvent.OutputObject
    >;
    CertificationRevoked: TypedContractEvent<
      CertificationRevokedEvent.InputTuple,
      CertificationRevokedEvent.OutputTuple,
      CertificationRevokedEvent.OutputObject
    >;
  };
}
