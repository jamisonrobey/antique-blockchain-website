/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AntiqueVerificationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "certificationCount"
      | "certifications"
      | "verifyCertification"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "CertificationVerified"): EventFragment;

  encodeFunctionData(
    functionFragment: "certificationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "certifications",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCertification",
    values: [AddressLike, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "certificationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "certifications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyCertification",
    data: BytesLike
  ): Result;
}

export namespace CertificationVerifiedEvent {
  export type InputTuple = [
    owner: AddressLike,
    artifactName: string,
    certificationDate: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    artifactName: string,
    certificationDate: bigint
  ];
  export interface OutputObject {
    owner: string;
    artifactName: string;
    certificationDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AntiqueVerification extends BaseContract {
  connect(runner?: ContractRunner | null): AntiqueVerification;
  waitForDeployment(): Promise<this>;

  interface: AntiqueVerificationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  certificationCount: TypedContractMethod<[], [bigint], "view">;

  certifications: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean] & {
        ownerAddress: string;
        artifactName: string;
        certificationDate: bigint;
        isCertified: boolean;
      }
    ],
    "view"
  >;

  verifyCertification: TypedContractMethod<
    [
      _owner: AddressLike,
      _artifactName: string,
      _certificationDate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "certificationCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "certifications"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean] & {
        ownerAddress: string;
        artifactName: string;
        certificationDate: bigint;
        isCertified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyCertification"
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _artifactName: string,
      _certificationDate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CertificationVerified"
  ): TypedContractEvent<
    CertificationVerifiedEvent.InputTuple,
    CertificationVerifiedEvent.OutputTuple,
    CertificationVerifiedEvent.OutputObject
  >;

  filters: {
    "CertificationVerified(address,string,uint256)": TypedContractEvent<
      CertificationVerifiedEvent.InputTuple,
      CertificationVerifiedEvent.OutputTuple,
      CertificationVerifiedEvent.OutputObject
    >;
    CertificationVerified: TypedContractEvent<
      CertificationVerifiedEvent.InputTuple,
      CertificationVerifiedEvent.OutputTuple,
      CertificationVerifiedEvent.OutputObject
    >;
  };
}
