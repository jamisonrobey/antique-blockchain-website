/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type AntiqueStruct = {
  name: string;
  category: BigNumberish;
  period: BigNumberish;
  owner: AddressLike;
  available: boolean;
};

export type AntiqueStructOutput = [
  name: string,
  category: bigint,
  period: bigint,
  owner: string,
  available: boolean
] & {
  name: string;
  category: bigint;
  period: bigint;
  owner: string;
  available: boolean;
};

export interface AntiqueCertificationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAntique"
      | "antiqueCertificationBody"
      | "antiques"
      | "getAntiques"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAntique",
    values: [string, string, string, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "antiqueCertificationBody",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "antiques",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAntiques",
    values: [BigNumberish, string, string, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "addAntique", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "antiqueCertificationBody",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "antiques", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAntiques",
    data: BytesLike
  ): Result;
}

export interface AntiqueCertification extends BaseContract {
  connect(runner?: ContractRunner | null): AntiqueCertification;
  waitForDeployment(): Promise<this>;

  interface: AntiqueCertificationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAntique: TypedContractMethod<
    [
      name: string,
      categoryStr: string,
      periodStr: string,
      antiqueOwner: AddressLike,
      availability: boolean
    ],
    [void],
    "nonpayable"
  >;

  antiqueCertificationBody: TypedContractMethod<[], [string], "view">;

  antiques: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string, boolean] & {
        name: string;
        category: bigint;
        period: bigint;
        owner: string;
        available: boolean;
      }
    ],
    "view"
  >;

  getAntiques: TypedContractMethod<
    [
      numAntiques: BigNumberish,
      categoryStr: string,
      periodStr: string,
      available: boolean
    ],
    [AntiqueStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAntique"
  ): TypedContractMethod<
    [
      name: string,
      categoryStr: string,
      periodStr: string,
      antiqueOwner: AddressLike,
      availability: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "antiqueCertificationBody"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "antiques"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string, boolean] & {
        name: string;
        category: bigint;
        period: bigint;
        owner: string;
        available: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAntiques"
  ): TypedContractMethod<
    [
      numAntiques: BigNumberish,
      categoryStr: string,
      periodStr: string,
      available: boolean
    ],
    [AntiqueStructOutput[]],
    "view"
  >;

  filters: {};
}
